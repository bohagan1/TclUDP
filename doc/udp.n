'\"
'\" Generated from file 'udp\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 1999-2000 Columbia University; all rights reserved
'\"
.TH "udp" n 1\&.0\&.12 udp "Tcl UDP extension"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
udp \- Create UDP sockets in Tcl
.SH SYNOPSIS
package require \fBTcl 8\&.5\fR
.sp
package require \fBudp 1\&.0\&.12\fR
.sp
\fBudp_open\fR ?\fIlocalport\fR? ?\fBreuse\fR? ?\fBipv6\fR?
.sp
\fBudp_conf\fR \fIchannel\fR \fIhost\fR \fIport\fR
.sp
\fBudp_conf\fR \fIchannel\fR \fI?optionName?\fR \fI?value?\fR \fI?optionName value \&.\&.\&.?\fR
.sp
\fBudp_peek\fR \fIchannel\fR ?\fIbuffersize\fR?
.sp
\fB::udp::build-info\fR
.sp
\fB::udp::getaddrinfo\fR \fI\fB-hostname\fR name\fR \fI?optionName value \&.\&.\&.?\fR
.sp
\fB::udp::getnameinfo\fR \fIaddress\fR \fB?ipv6?\fR
.sp
.BE
.SH DESCRIPTION
This package provides support for using UDP through Tcl\&. The package provides
a new channel type and attempts to permit the use of packet oriented UDP
over stream oriented Tcl channels\&. The package defined three commands but
\fBudp_conf\fR should be considered depreciated in favor of the standard
Tcl command \fBfconfigure\fR\&.
.SH COMMANDS
.TP
\fBudp_open\fR ?\fIlocalport\fR? ?\fBreuse\fR? ?\fBipv6\fR?
\fBudp_open\fR will open a UDP socket\&. If a \fIlocalport\fR is specified the UDP
socket will be opened on that port\&. Otherwise the system will choose a port
and the user can use the \fBudp_conf\fR command to obtain the port number
if required\&.
.sp
The following keywords can be used to specify options on the opened socket\&.
.RS
.TP
\fBreuse\fR
Using this keyword sets the SO_REUSEADDR socket option which permits multiple
sockets to be bound to the same address/port combination\&.
.TP
\fBipv6\fR
By default a IPv4 socket is created\&. When keyword \fBipv6\fR is specified, an IPv6
socket is opened\&.
.RE
.TP
\fBudp_conf\fR \fIchannel\fR \fIhost\fR \fIport\fR
\fIDeprecated\fR in favor of the standard Tcl \fBfconfigure\fR or
\fBchan configure\fR commands\&.
.sp
\fBudp_conf\fR in this configuration is used to specify the remote destination
for packets written to this \fIchannel\fR\&. You must call this command before
writing data to the UDP socket\&.
.TP
\fBudp_conf\fR \fIchannel\fR \fI?optionName?\fR \fI?value?\fR \fI?optionName value \&.\&.\&.?\fR
\fIDeprecated\fR in favor of the standard Tcl \fBfconfigure\fR or
\fBchan configure\fR commands\&.
.sp
In addition to being used to configure the remote host, the \fBudp_conf\fR
command is used to obtain information about the UDP socket\&. NOTE all these
options are now available using the standard Tcl \fBfconfigure\fR or
\fBchan configure\fR command\&.
.RS
.TP
\fB-myport\fR
Returns the local port number of the socket\&. Read-only option\&.
.TP
\fB-remote\fR \fI?address port?\fR
Specifies or returns the remote hostname and port number\&. Can also be set using
\fBudp_conf\fR \fIchannel\fR \fIhost\fR \fIport\fR\&.
.TP
\fB-peer\fR
Returns the remote hostname and port number for the packet most recently
received by this socket\&. Read-only option\&.
.TP
\fB-family\fR
Returns whether socket is configured for IPv4 or IPv6\&. Read-only option\&.
.TP
\fB-broadcast\fR \fI?boolean?\fR
Specifies or returns whether can listen and send on the broadcast address\&. For some systems
a flag must be set on the socket to use broadcast\&. This option is not permitted when
using IPv6, instead use multicast\&.
.TP
\fB-ttl\fR \fI?count?\fR
The time-to-live is given as the number of router hops the packet may do\&. For
multicast packets this is important in specifying the distribution of the
packet\&. The system default for multicast is 1 which restricts the packet
to the local subnet\&. To permit packets to pass routers, you must increase the
ttl\&. A value of 31 should keep it within a site, while 255 is global\&.
.TP
\fB-mcastadd\fR groupaddr
.TP
\fB-mcastadd\fR "groupaddr netwif"
.TP
\fB-mcastdrop\fR groupaddr
.TP
\fB-mcastdrop\fR "groupaddr netwif"
.TP
\fB-mcastgroups\fR
\fBtcludp\fR sockets can support IPv4 and IPv6 multicast operations\&. To receive
multicast packets the application has to notify the operating system that
it should join a particular multicast group\&. For IPv4 these are specified as addresses
in the range 224\&.0\&.0\&.0 to 239\&.255\&.255\&.255\&.
.sp
When specifying only the \fIgroupaddr\fR the system will determine the network interface to use\&.
Specifying the \fInetwif\fR will join a multicast group on a specific network interface\&.
This is useful on a multihomed system with multiple network interfaces\&.
On windows you must specify the network interface index\&. For other platforms the network
interface (e\&.g\&. 'eth0') name can be specified\&.
.sp
To view the current set of multicast groups for a channel use \fI-mcastgroups\fR
.TP
\fB-mcastif\fR
Returns which interface is used for outgoing multicast packets\&. UNIX only\&.
.TP
\fB-mcastloop\fR \fI?boolean?\fR
With multicast udp the system can choose to receive packets that it has sent
or it can drop them\&. This is known as multicast loopback and can be controlled
using this option\&. By default the value is true and your application will receive
its own transmissions\&.
.RE
.TP
\fBudp_peek\fR \fIchannel\fR ?\fIbuffersize\fR?
Examine a packet without removing it from the buffer\&. Option \fIbuffersize\fR specifies the
maximum buffer size\&. Value must be between 0 and 16\&.
.sp
This function is not available on windows\&.
.TP
\fB::udp::build-info\fR
Return information on the build environment\&.
.TP
\fB::udp::getaddrinfo\fR \fI\fB-hostname\fR name\fR \fI?optionName value \&.\&.\&.?\fR
Returns a list with info on the IP address matching the specified parameters\&.
Valid options are:
.RS
.TP
\fB-hostname\fR \fIname\fR
Specifies which IP address to use for lookup\&. Can use IP address or name\&. Required option\&.
.TP
\fB-port\fR \fInumber\fR
Specifies which port number to use for lookup\&.
.TP
\fB-service\fR \fIname\fR
Specifies which well-known service (i\&.e\&. http, https, etc\&.) to use for port in lookup\&.
.TP
\fB-ipv4\fR
Only return IP v4 addresses\&.
.TP
\fB-ipv6\fR
Only return IP v6 addresses\&.
.TP
\fB-server\fR
Only return services for which hostname is a server\&.
.TP
\fB-tcp\fR
Only return TCP services\&.
.TP
\fB-udp\fR
Only return UDP services\&.
.RE
.TP
\fB::udp::getnameinfo\fR \fIaddress\fR \fB?ipv6?\fR
\fB::udp::getnameinfo\fR will return the name(s) corresponding to IP
address \fIaddress\fR\&. With \fIipv6\fR, address is an IPv6 address\&.
.PP
.SH EXAMPLES
.PP
.CS


# Send data to a remote UDP socket
proc udp_puts {host port} {
    set s [udp_open]
    fconfigure $s -remote [list $host $port]
    puts $s "Hello, World"
    close $f
}

.CE
.CS


# A simple UDP server
package require udp

proc udpEventHandler {sock} {
    set pkt [read $sock]
    set peer [fconfigure $sock -peer]
    puts "$peer: [string length $pkt] {$pkt}"
    return
}

proc udp_listen {port} {
    set srv [udp_open $port]
    fconfigure $srv -buffering none -translation binary
    fileevent $srv readable [list ::udpEventHandler $srv]
    puts "Listening on udp port: [fconfigure $srv -myport]"
    return $srv
}

set sock [udp_listen 53530]
vwait forever
close $sock

.CE
.CS


# A multicast demo\&.
proc udpEvent {chan} {
    set data [read $chan]
    set peer [fconfigure $chan -peer]
    puts "$peer [string length $data] '$data'"
    if {[string match "QUIT*" $data]} {
        close $chan
        set ::forever 1
    }
    return
}

set group 224\&.5\&.1\&.21
set port  7771
set s [udp_open $port]
fconfigure $s -buffering none -blocking 0
fconfigure $s -mcastadd $group -remote [list $group $port]
fileevent $s readable [list udpEvent $s]
puts -nonewline $s "hello, world"
set ::forever 0
vwait ::forever
exit

.CE
.SH HISTORY
Some of the code in this extension is copied from Michael Miller's tcludp
package\&. (http://www\&.neosoft\&.com/tcl/ftparchive/sorted/comm/tcludp-1\&.0/)
Compared with Michael's UDP extension, this extension provides Windows
support and provides the ability of using 'gets/puts' to read/write
the socket\&. In addition, it provides more configuration ability\&.
.PP
Enhancements to support binary data and to setup the package for the Tcl
Extension Architecture by Pat Thoyts\&.
.PP
Support for IPv6 and allowing a multicast join on a specific network interface is added by Huub Eikens\&.
.SH "SEE ALSO"
socket(n)
.SH KEYWORDS
I/O, IP Address, TclUDP, UDP, asynchronous I/O, bind, channel, connection, domain, host, name, network, network address, networking, socket, udp
.SH COPYRIGHT
.nf
Copyright (c) 1999-2000 Columbia University; all rights reserved

.fi
